import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { fetchUsers } from "./usersAPI";

export interface User {
  id: string;
  name: string;
  age: number;
}
export interface UsersState {
  users: User[];
  loading: boolean;
  error: string | undefined;
}

const initialState: UsersState = {
  users: [],
  loading: false,
  error: undefined,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchUsersAsync = createAsyncThunk<User[]>(
  "users/fetchUsers",
  async () => {
    return fetchUsers();
  }
);

export const usersSlice = createSlice({
  name: "users",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchUsersAsync.pending, (state) => {
        return {
          ...state,
          error: undefined,
          loading: true,
        };
      })
      .addCase(fetchUsersAsync.fulfilled, (state, action) => {
        return {
          users: action.payload,
          error: undefined,
          loading: false,
        };
      })
      .addCase(fetchUsersAsync.rejected, (state, action) => {
        return {
          users: [],
          error: action.error.message,
          loading: false,
        };
      });
  },
});

// export const {} = usersSlice.actions;

export const selectUsers = (state: RootState) => state.users;

export default usersSlice.reducer;
