import {
  createAsyncThunk,
  createSelector,
  createSlice,
  SliceCaseReducers,
} from "@reduxjs/toolkit";
import _ from "lodash";
import { RabbiEnum } from "../model/rabi.enum";
import { Snapshot, SnapshotSerializable } from "../model/snapshot";
import { RootState } from "../store/store";
import { fetchLessonsByRabbi } from "./lessonsService";
import serialize from "serialize-javascript";
import { deserialize } from "../utils/deserialize";
import { Lesson } from "../model/lesson";

export interface LessonsState<T> {
  snapshot: T;
  loading: boolean;
  error: string | undefined;
}

const lessonsInitialState: LessonsState<SnapshotSerializable> = {
  snapshot: {
    date: undefined,
    rabbi: RabbiEnum.RABBI_FIREMAN,
    lessons: serialize([]),
  },
  loading: false,
  error: undefined,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchLessonsAsync = createAsyncThunk<SnapshotSerializable>(
  "lessons/fetchLessons",
  async () => {
    return fetchLessonsByRabbi(RabbiEnum.RABBI_FIREMAN);
  }
);

export const lessonsSlice = createSlice<
  LessonsState<SnapshotSerializable>,
  SliceCaseReducers<LessonsState<SnapshotSerializable>>
>({
  name: "lessons",
  initialState: lessonsInitialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchLessonsAsync.pending, (state) => {
        return {
          ...state,
          error: undefined,
          loading: true,
        };
      })
      .addCase(fetchLessonsAsync.fulfilled, (state, action) => {
        if (_.isEqual(state.snapshot, action.payload)) {
          return {
            ...state,
            error: undefined,
            loading: false,
          };
        }
        return {
          ...state,
          snapshot: action.payload,
          error: undefined,
          loading: false,
        };
      })
      .addCase(fetchLessonsAsync.rejected, (state, action) => {
        return {
          ...state,
          error: action.error.message,
          loading: false,
        };
      });
  },
});

export const selectLessonsState = (state: RootState) => state.lessons;

export const selectLessonsSnapshot = createSelector(
  selectLessonsState,
  (state) => {
    return {
      ...state,
      snapshot: {
        rabbi: RabbiEnum[state.snapshot.rabbi],
        date: new Date(+state.snapshot.date),
        lessons: deserialize<Lesson[]>(state.snapshot.lessons).map((lesson) => {
          if (!lesson.date) {
            lesson.date = new Date();
          }
          return lesson;
        }),
      },
    };
  }
);

export const selectLessons = createSelector(
  selectLessonsSnapshot,
  (snapshot) => snapshot.snapshot.lessons
);

export default lessonsSlice.reducer;
